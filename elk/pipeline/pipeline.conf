input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mysql-connector.jar" 
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_connection_string => "jdbc:${DATABASE_URL}" 
    jdbc_user => "${DATABASE_USER}" 
    jdbc_password => "${DATABASE_PASSWORD}" 
    jdbc_paging_enabled => true
    tracking_column => "unix_ts_in_secs"
    use_column_value => true
    tracking_column_type => "numeric"
    schedule => "*/5 * * * * *"
    statement => "
      SELECT p.id, p.authorId, p.title, p.description, p.price, p.status, p.category, p.zone, UNIX_TIMESTAMP(p.updatedAt) AS unix_ts_in_secs, u.id as userId, u.username, u.profileImageUrl, i.id as imageId, i.url
      FROM Post p INNER JOIN User u ON p.authorId = u.id LEFT JOIN Image i on i.postId = p.id
      WHERE (UNIX_TIMESTAMP(p.updatedAt) > :sql_last_value AND p.updatedAt < NOW()) ORDER BY p.updatedAt ASC"
  }
}
filter {
  aggregate {
    task_id => "%{id}"
      code => "
        map['id'] = event.get('id')
        map['title'] = event.get('title')
        map['description'] = event.get('description')
        map['price'] = event.get('price')
        map['status'] = event.get('status')
        map['category'] = event.get('category')
        map['zone'] = event.get('zone')
        map['authorId'] = event.get('authorid')
        map['author'] = {
          'id' => event.get('userid'),
          'username' => event.get('username'),
          'profileImageUrl' => event.get('profileimageurl'),
        }
        map['images'] ||= []
        map['images'] << {
          'id' => event.get('imageid'),
          'url' => event.get('url'),
        }
        event.cancel()"
      push_previous_map_as_event => true
      timeout => 30
  }
  mutate {
    copy => { "id" => "[@metadata][_id]"}
    remove_field => ["@version", "unix_ts_in_secs"]
  }
}
output {
  elasticsearch {
    index => "posts_idx"
    ilm_enabled => false
    hosts => "${ELASTICSEARCH_HOSTS}"
    document_id => "%{[@metadata][_id]}"
  }
}
